이중화 개요

1. 이중화의 정의
   데이터베이스 두 대 이상이 데이터가 동일한 상태로 운영되는 방식을 이중화라고 함.
 이중화된 데이터베이스 각각을 노드(Node)라고 칭함.

2. 이중화 구성
 이중화 구성에 따라 크게 Active/Active형식, Active/Standby 형식으로 나눌 수 있음.
  1) Active/Active형식
     - 모든 데이터베이스 노드가 읽기/쓰기 요청을 받아들일 수 있는 이중화 구성
     - 오라클 RAC, MariaDB의 Galera Cluster, Altibase 이중화 구성이 이에 속함
  2) Active/Standby형식
     - 이중화 클러스터 내의 단 한대의 Active노드(마스터노드)만이 쓰기 요청을 받을 수 있음. 
     - 나머지 노드는 모두 읽기 요청만을 받아들이는 이중화 형식
     - MariaDB의 이중화, PostgreSQL의 이중화 구성 등이 이에 속한다.
     - MySQL/MariaDB에서는 특히 Master/Slave라고도 칭했다.
  
3. 이중화가 필요한 이유
  1) 장애조치
     - DB서버 단 한대로만 운영할 경우, DB서버에 장애가 서비스 장애로 직결됨
     - 이중화 환경에서는 마스터DB가 서비스를 처리하다가, 마스터DB가 장애발생하면 스탠바이DB를 마스터로 전환(Fail-Over)하여
       서비스를 지속할 수 있음.
     - 화재와 같은 재난상황에서 DB를 복구하기 위한 DR(Disaster Recovery)구성에도 이중화는 핵심 요소임.
     - 이러한 이유에서 거의 모든 서비스에서 이중화는 필수 요소임.
  2) 부하분산
     - Active/Standby 환경에선 마스터DB에 쓰기요청을, 스탠바이DB에 읽기요청을 할 수 있음.
     - 최근 출시되는 Connection Pool들은 거의 모두 이러한 라우팅을 지원함.
  3) 백업 등의 유지보수에 용이
     - 서비스 처리는 주로 마스터DB에서 수행하므로, 스탠바이DB는 거의 하는 일이 없음
     - 스탠바이DB에서 백업, ETL용도의 데이터 전송 업무, 기타 조회전용 배치작업을 실시하여 서비스영향도를 없앨 수 있음
